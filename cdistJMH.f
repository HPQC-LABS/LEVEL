c***********************************************************************
c   From J.M.Hutson@durham.ac.uk  Wed Mar 11 11:53:47 1992
c***********************************************************************
C     PROGRAM CDIST
C
C     PROGRAM TO CALCULATE ENERGY LEVELS AND ROTATIONAL AND CENTRIFUGAL
C     DISTORTION CONSTANTS FOR A DIATOMIC MOLECULE, STARTING FROM A
C     POTENTIAL ENERGY CURVE.
C
C     THE METHOD USED IS THAT OF J.M.HUTSON, J.PHYS. B, 14, 851 (1981),
C     AND IS VALID FOR ALL VIBRATIONAL LEVELS, EVEN NEAR DISSOCIATION.
C     PROGRAM BY JEREMY M.HUTSON,
C                DEPARTMENT OF CHEMISTRY,
C                UNIVERSITY OF DURHAM,
C                DURHAM,
C                DH1 3LE
C                ENGLAND.
C     VERSION OF MARCH 1982.
C
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL ALL
      CHARACTER*1 char1,char2,char3
      DIMENSION V(8000),X0(8000),X1(8000),X2(8000),G(8000),
     1   WKS(8000),E(100),TITLE(20)
      DATA ZERO/0.0D0/, ONE/1.0D0/, EPS/1.0D-6/
      DATA IN,IOUT/5,6/
C
C     STATEMENT FUNCTIONS FOR RADIAL DISTANCE R
C     AND PERTURBATION 1/(R*R)-B
C
      R(N)=RMIN+H*DBLE(N-1)
      PERT(N)=ONE/(R(N)*R(N))-B
C
   10 CONTINUE
C
C
C     INPUT VARIABLES ARE:
C       TITLE - TITLE FOR RUN, ECHOED TO OUTPUT FILE
C       NLEV  - ABS(NLEV) IS NUMBER OF LEVELS FOR WHICH CALCULATIONS
C               ARE TO BE PERFORMED. IF NLEV > 0, THE PROGRAM EXPECTS
C               GUESSES FOR THE LEVEL POSITIONS; IF NLEV < 0, THE FIRST
C               -NLEV BOUND LEVELS WILL BE FOUND AUTOMATICALLY.
C       IOPT  - FLAG TO CONTROL CALCULATION OF HIGHER-ORDER CENTRIFUGAL
C               DISTORTION CONSTANTS:
C               IOPT = 1 CALCULATES G(V), B(V), D(V) AND H(V) ONLY
C               IOPT = 2 CALCULATES L(V) AND M(V) AS WELL.
C       RMIN  - INNER LIMIT OF RADIAL MESH USED IN SOLVING EQUATIONS.
C               RMIN SHOULD BE WELL UP ON THE REPULSIVE WALL OF THE
C               POTENTIAL CURVE. (UNITS: ANGSTROMS)
C       RMAX  - OUTER LIMIT OF RADIAL MESH USED IN SOLVING EQUATIONS.
C               RMAX SHOULD BE SIGNIFICANTLY BEYOND THE OUTER TURNING
C               POINT OF THE HIGHEST VIBRATIONAL LEVEL BEING CALCULATED.
C               (UNITS: ANGSTROMS)
C       RMU   - REDUCED MASS OF DIATOMIC MOLECULE (UNITS: AMU)
C       NIP   - NUMBER OF POINTS ON RADIAL MESH USED IN SOLVING EQUATION
C               AN ABSOLUTE MINIMUM OF 20 POINTS PER NODE IS REQUIRED,
C               BUT CONSIDERABLY MORE MAY BE NEEDED. CHECK CONVERGENCE
C               OF YOUR CALCULATIONS WITH RESPECT TO THIS PARAMETER.
C
C     THE CURRENT MAXIMUM VALUE OF NIP IS 8000. TO INCREASE THIS,
C     SIMPLY CHANGE THE DIMENSION STATEMENT FOR V, X0, X1, X2 AND G
C     TO THE NEW MAXIMUM VALUE REQUIRED FOR NIP.
C
      READ(IN,101)TITLE
      READ(IN,102)NLEV,IOPT
      READ(IN,103)RMIN,RMAX,RMU
      READ(IN,102)NIP
C
      WRITE(IOUT,201)TITLE
      IF(NIP.GT.8000) WRITE(IOUT,202)NIP
      NIP=MIN0(NIP,8000)
      WRITE(IOUT,203)NIP,RMIN,RMAX
      ALL=NLEV.LT.0
      NLEV2=MIN0(IABS(NLEV),100)
      EIN=ZERO
C
C     FOR CORRECT OPERATION OF THIS PROGRAM, THE RESULT OF A
C     FLOATING POINT UNDERFLOW SHOULD BE ZERO.
C     A CALL TO AN APPROPRIATE SYSTEM ROUTINE SHOULD BE INSERTED HERE.
C     (E.G. IBM ROUTINE 'ALLOW', ICL ROUTINE 'ICL9HEMASK')
C
C     CALL MASK
C
C     SUBROUTINE CDPOT RETURNS SCALED POTENTIAL ARRAY V
C     OF NIP POINTS OF STEP SIZE H, STARTING AT RMIN.
C     VSCALE IS CONVERSION FACTOR 0.5*HBAR*HBAR/MU FOR
C     CONVERTING BACK INTO 'REAL' ENERGY UNITS.
C     ARRAY PARAMETERS X0,X1,X2 TO CDPOT MAY BE USED AS WORKSPACE.
C
      VSCALE=16.857629206D0/RMU
      H=(RMAX-RMIN)/DBLE(NIP-1)
      CALL CDPOT(V,NIP,RMIN,H,0,VSCALE,X0,X1,X2,IN,IOUT)
C
C     RADSOL IS CALLED IF OPTION TO FIND ALL BOUND STATES IS
C     SELECTED (IE NLEV < 0). IT RETURNS EIGENVALUES OF THE NLEV
C     LEVELS IT FINDS IN THE ARRAY E.
C
      IF(ALL) CALL RADSOL(V,X0,NIP,E,NLEV2,NLEV,RMIN,H,EPS)
      IF(NLEV.EQ.0) GOTO 2000
      WRITE(IOUT,204)NLEV
C
      DO 1000 NL=1,NLEV
C
C     READ GUESS OF LEVEL POSITION FOR THIS LEVEL (ALWAYS IN WAVENUMBERS
C
      IF(.NOT.ALL) READ(IN,103)EIN
      EIN=EIN/VSCALE
      IF(ALL) EIN=E(NL)
C
C     SOLVE FOR ZEROTH ORDER WAVEFUNCTION X0 BY COOLEY METHOD.
C
      CALL SCHROD(X0,ONE,NFOUND,EPS,20,H,RMIN,R(NIP),V,NIP,
     1   EIN,EOUT,IFAIL)
      IF(ALL .AND. (IFAIL.NE.0 .OR. NFOUND.NE.NL-1)) STOP
      IF(.NOT.ALL .AND. IFAIL.NE.0) GOTO 900
C
      B     = ZERO
      D     = ZERO
      E3    = ZERO
      E4    = ZERO
      E5    = ZERO
      OLAP  = ZERO
      OLAP2 = ZERO
      XNORM = ZERO
C
C     CALCULATE ROTATIONAL CONSTANT AS EXPECTATION VALUE OF 1/(R*R)
C
      DO 100 N=1,NIP
      TEMP=X0(N)/R(N)
      B=B+TEMP*TEMP
  100 CONTINUE
      B=B*H
C
C     FORM G VECTOR FOR USE IN DIRECT SOLUTION SUBROUTINE
C
      DO 200 N=1,NIP
      G(N)=X0(N)*PERT(N)
  200 CONTINUE
C
C     FIND OUTERMOST WAVEFUNCTION MAXIMUM FOR USE IN LIDEO.
C
      MID=NIP
      DO 300 N=2,NIP
      MID=MID-1
      IF(X0(MID).LT.X0(MID+1)) GOTO 400
  300 CONTINUE
  400 CONTINUE
C
C     DIRECT SOLUTION OF FIRST ORDER PERTURBATION EQUATION BY LIDEO
C
      CALL LIDEO(V,G,X0,X1,NIP,EOUT,H,WKS,X2,MID)
C
C     INTEGRATE FOR MOLECULAR D AND H (CALLED E3 HERE)
C     AND SIMULTANEOUSLY FORM NEW G ARRAY FOR SECOND ORDER EQUATION.
C
      DO 500 N=1,NIP
      D=D-G(N)*X1(N)
      OLAP=OLAP+X0(N)*X1(N)
      G(N)=X1(N)*PERT(N)
      E3=E3+X1(N)*G(N)
  500 CONTINUE
C
      D=D*H
      OLAP=OLAP*H
      E3=E3*H
C
      IF(IOPT.EQ.1) GOTO 800
C
C     ADD SECOND TERM OF ELEMENTS OF G ARRAY
C
      DO 600 N=1,NIP
      G(N)=G(N)+D*X0(N)
  600 CONTINUE
C
C     SOLVE SECOND ORDER PERTURBATION EQUATION.
C
      CALL LIDEO(V,G,X0,X2,NIP,EOUT,H,WKS,X0,MID)
C
C     PERFORM INTEGRATIONS
C
      DO 700 N=1,NIP
      TEMP=X2(N)*PERT(N)
      E4=E4+TEMP*X1(N)
      E5=E5+TEMP*X2(N)
      XNORM=XNORM+X1(N)*X1(N)
      OLAP2=OLAP2+X1(N)*X2(N)
  700 CONTINUE
C
C     EVALUATE HIGHER ORDER CENTRIFUGAL DISTORTION CONSTANTS
C     AND SCALE TO ENERGY UNITS REQUIRED USING VSCALE.
C
      E4=(E4+D*XNORM)*H*VSCALE
      E5=(E5+(D+D)*OLAP2-E3*XNORM)*H*VSCALE
  800 CONTINUE
C
      EOUT=EOUT*VSCALE
      B=B*VSCALE
      D=D*VSCALE
      E3=E3*VSCALE
      WRITE(IOUT,205)NFOUND,EOUT,B,D,E3,E4,E5,OLAP
      GOTO 1000
C
  900 CONTINUE
      EIN=EIN*VSCALE
      WRITE(IOUT,206)IFAIL,EIN
C
 1000 CONTINUE
      READ(IN,102)IAGAIN
      IF(IAGAIN.GT.0) GOTO 10
      I=ieee_flags ( 'clearall', char1, char2, char3 )
      STOP
C
 2000 CONTINUE
      WRITE(IOUT,208) (V(N),N=1,NIP,10)
      STOP
C
  101 FORMAT(20A4)
  102 FORMAT(20I5)
  103 FORMAT(8F10.2)
C
  201 FORMAT(//1X,20A4/)
  202 FORMAT(' *** WARNING -',I6,' MESH POINTS REQUESTED TOO MANY FOR',
     1   ' ARRAY DIMENSIONS - NIP RESET TO 8000'/)
  203 FORMAT(/' DIFFERENTIAL EQUATIONS SOLVED USING RADIAL MESH OF',
     1   I6,' POINTS'/' BETWEEN',F5.2,' AND',F6.2,' ANGSTROMS.'/)
  204 FORMAT(/' ROTATIONAL AND CENTRIFUGAL DISTORTION CONSTANTS FOR',
     1   I3,' LEVELS'//' VIB QN',T14,'ENERGY',T31,'B',T48,'D',T65,
     2   'H',T82,'L',T99,'M',T108,'ORTHOGONALISATION'/)
  205 FORMAT(I5,F15.4,6(3X,E14.7))
  206 FORMAT(' SCHROD FAILS WITH IFAIL =',I2,' FOR INPUT ENERGY',
     1   F15.3/' IFAIL = 1 INDICATES FAILURE TO CONVERGE EIGENVALUE TO',
     2   ' THE ACCURACY REQUESTED'/' IF IFAIL = 2, SUPPLIED ENERGY IS',
     3   ' PROBABLY EITHER BELOW POTENTIAL MINIMUM OR ABOVE'/
     4   ' EITHER V(RMIN) OR V(RMAX)'/)
  208 FORMAT(/' RADSOL FAILS TO FIND ANY BOUND STATES.'/
     1   ' THIS PROBABLY MEANS THAT THE SUPPLIED POTENTIAL COVERS AN',
     2   ' INAPPROPRIATE RANGE OF R.'/' FIRST CHECK SUBROUTINE CDPOT'
     3   //' SUPPLIED POTENTIAL AT EVERY TENTH MESH POINT IS'/
     4   100(8(2X,E12.6)/))
C
      END





      SUBROUTINE CDPOT(V,NIP,RMIN,H,J,VSCALE,RT,VT,WKS,IN,IOUT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      CHARACTER*8 PNAME(5)
      DIMENSION V(NIP),RT(NIP),VT(NIP),WKS(NIP)
      DATA PNAME/'LJ(12-6)','   MORSE','NUMERIC ','N(R*)-6 ',
     1   '   EXP-N'/
      DATA ZERO/0.0D0/, ONE/1.0D0/, SIX/6.0D0/
C
      R(N)=RMIN+H*DBLE(N-1)
      CENT(N)=DBLE(J*(J+1))/(R(N)*R(N))
C
C     INPUT VARIABLES ARE
C       IPOT   - FLAG FOR POTENTIAL TYPE:
C                IPOT = 1 LENNARD-JONES
C                IPOT = 2 MORSE
C                IPOT = 3 NUMERICAL POTENTIAL
C                IPOT = 4 MAITLAND-SMITH
C                IPOT = 5 BUCKINGHAM EXP-N
C       IPRINT - IF IPRINT > 0, THE SCALED POTENTIAL IS PRINTED OUT AT
C                EVERY IPRINT'TH POINT. THIS OPTION CAN WASTE
C                A LOT OF PAPER
C       EPS    - WELL DEPTH
C       RE     - EQUILIBRIUM DISTANCE
C       BETA   - WALL PARAMETER FOR MORSE POTENTIAL
C                                   MAITLAND-SMITH POTENTIAL (M)
C                                   BUCKINGHAM EXP-N POTENTIAL (ALPHA)
C                INPUT BETA IRRELEVANT FOR IPOT = 1 OR 3
C       TE     - ABSOLUTE ENERGY OF POTENTIAL MINIMUM.
C                TE SIMPLY SHIFTS ALL LEVELS BY THE QUANTITY INPUT, AND
C                MAY BE USED TO GET OUTPUT INTO MORE CONVENIENT FORM.
C       NSIX   - LONG-RANGE POWER FOR IPOT = 5
C
C     EPS, RE AND TE MUST BE APPROXIMATELY CORRECT FOR THE NUMERICAL
C     POTENTIAL (IPOT=3), AS THEY ARE USED IN INTERPOLATION.
C
      READ(IN,102)IPOT,IPRINT
      READ(IN,101)EPS,RE,BETA,TE,NSIX
      IF(NSIX.EQ.0) NSIX=6
      WRITE(IOUT,201)PNAME(IPOT),J,EPS,RE,BETA,TE
C
C     OPTION TO SCALE INPUT ENERGIES AND R VALUES.
C     MAY BE USED EITHER FOR UNITS CONVERSION TO WAVENUMBERS/ANGSTROMS
C     OR FOR SCALING THEORETICAL POTENTIALS
C     NB. RSCALE AND ESCALE AFFECT ONLY QUANTITIES INPUT IN THIS
C         SUBROUTINE, AND NOT THOSE USED ELSEWHERE IN THE PROGRAM.
C
      ESCALE=ONE
      RSCALE=ONE
      READ(IN,101)ESCALE,RSCALE
      RE=RE*RSCALE
      IF(IPOT.EQ.2)BETA=BETA/RSCALE
      IF(RSCALE.NE.ONE) WRITE(IOUT,202)RSCALE,RE,BETA
      EPS=EPS*ESCALE
      TE=TE*ESCALE
      IF(ESCALE.NE.ONE) WRITE(IOUT,203)ESCALE,EPS,TE
      EPS=EPS/VSCALE
      TE=TE/VSCALE
      RIN=RMIN
      ROUT=R(NIP)
C
      GOTO(1000,2000,3000,4000,5000),IPOT
      WRITE(IOUT,200)IPOT
      STOP
C
 1000 CONTINUE
C
C     LENNARD-JONES 12-6 POTENTIAL
C
      DO 1100 N=1,NIP
      X=ONE-(RE/R(N))**6
      V(N)=TE+EPS*X*X+CENT(N)
 1100 CONTINUE
      GOTO 9999
C
 2000 CONTINUE
C
C     MORSE POTENTIAL
C
      DO 2100 N=1,NIP
      X=ONE-EXP(BETA*(RE-R(N)))
      V(N)=TE+EPS*X*X+CENT(N)
 2100 CONTINUE
      GOTO 9999
C
 3000 CONTINUE
C
C     NUMERICAL CURVE WITH ANALYTIC EXTENSION
C
C     NTURN IS NUMBER OF POTENTIAL POINTS TO BE INPUT
C     LONG IS A FLAG GOVERNING THE METHOD USED TO EXTRAPOLATE THE
C     SUPPLIED POTENTIAL AT LONG RANGE.
C     LONG = 0  NO EXTENSION NECESSARY
C     LONG = 1  USE THREE-TERM R**-N EXTENSION
C     LONG = 2  USE SHIFTED ONE-TERM R**-N EXTENSION
C     SEE COMMENTS BELOW FOR FURTHER INFORMATION.
C
      READ(IN,102)NTURN,LONG,NSTEP
      IF(NSTEP.GE.0) THEN
        NSTEP=1
        NSTART=1
        NEND=NTURN
      ELSE
        NSTEP=-1
        NSTART=NTURN
        NEND=1
      ENDIF
      DO 3100 N=NSTART,NEND,NSTEP
      READ(IN,*)RT(N),VT(N)
      VT(N)=VT(N)*ESCALE/VSCALE
      RT(N)=RT(N)*RSCALE
 3100 CONTINUE
      RIN=RT(1)
      ROUT=RT(NTURN)
      WRITE(IOUT,204)NTURN,RIN,ROUT
      NOFF=2+INT((RIN-RMIN)/H)
      NOFF=MAX0(1,NOFF)
      NL=1+INT((ROUT-RMIN)/H)
      NL=MIN0(NIP,NL)
      NTP=NL-NOFF+1
      BETA=LOG(ONE+SQRT((VT(1)-TE)/EPS))/(RE-RIN)
C
C     SHORT RANGE EXTENSION USING APPROXIMATE MORSE POTENTIAL
C
      IF(NOFF.LE.1)GOTO 3250
      WRITE(IOUT,205)BETA
      DO 3200 N=1,NOFF
      X=ONE-EXP(BETA*(RE-R(N)))
      V(N)=TE+EPS*X*X+CENT(N)
 3200 CONTINUE
 3250 CONTINUE
C
C     INTERPOLATE USING PRODUCT OF MORSE POTENTIAL AND CUBIC SPLINE
C
      DO 3300 N=1,NTURN
      X=ONE-EXP(BETA*(RE-RT(N)))
      VT(N)=(VT(N)+EPS-TE)/(EPS*(X*X+ONE))
 3300 CONTINUE
      CALL INTRP(RT,VT,NTURN,WKS,V(NOFF),NTP,R(NOFF),H,4*NTURN)
      DO 3400 N=NOFF,NL
      X=ONE-EXP(BETA*(RE-R(N)))
      V(N)=V(N)*EPS*(X*X+ONE)+TE-EPS+CENT(N)
 3400 CONTINUE
      VEND=V(NL)-CENT(NL)
      DVEND=(VEND-V(NL-1)+CENT(NL-1))/H
      DO 3450 N=NL,NIP
      V(N)=VEND+CENT(N)
 3450 CONTINUE
      IF(LONG.EQ.0) GOTO 9999
C
C     LONG DETERMINES TYPE OF LONG RANGE EXTENSION
C
      GOTO(3500,3800),LONG
C
C     LONG-RANGE EXTENSION USING
C     V(R) = V(ASYMPTOTE) - CN/R**N - CM/R**M - CL/R**L.
C     N, M, L AND CN ARE INPUT PARAMETERS, AND CM AND CL ARE
C     CALCULATED INTERNALLY TO MATCH THE POTENTIAL AND ITS
C     GRADIENT AT THE OUTERMOST NUMERICAL POINT SUPPLIED.
C     NOTE THAT SCALING IS NOT APPLIED TO CN, WHICH MUST BE
C     SUPPLIED IN UNITS OF WAVENUMBERS ANGSTROMS**N
C
 3500 CONTINUE
      READ(IN,102)N,M,L
      READ(IN,101)CN
      IF(NL.GE.NIP) GOTO 9999
      WRITE(IOUT,206)N,M,L,N,CN
      CN=CN/VSCALE
      VV=VEND-TE-EPS+CN/ROUT**N
      DV=DVEND-DBLE(N)*CN/ROUT**(N+1)
      CM=(DV+DBLE(L)*VV/ROUT)*ROUT**(M+1)/DBLE(M-L)
      CL=(DV+DBLE(M)*VV/ROUT)*ROUT**(L+1)/DBLE(L-M)
      CMM=CM*VSCALE
      CLL=CL*VSCALE
      WRITE(IOUT,207)M,CMM,L,CLL
      DO 3600 NLL=NL,NIP
      RR=R(NLL)
      V(NLL)=TE + EPS - CL/RR**L - CM/RR**M - CN/RR**N + CENT(NLL)
 3600 CONTINUE
      GOTO 9999
C
C     LONG-RANGE EXTENSION USING
C     V(R)=V(ASYMPTOTE)-CM*(RM/(R+DELTA))**M.
C     M IS AN INPUT PARAMETER, AND CM, RM AND DELTA ARE CALCULATED
C     INTERNALLY TO MATCH THE POTENTIAL AND ITS GRADIENT AT THE
C     OUTERMOST NUMERICAL POINT SUPPLIED.
C
 3800 CONTINUE
      READ(IN,102)M
      IF(NL.GE.NIP) GOTO 9999
      CM=TE+EPS-VEND
      RM=DBLE(M)*CM/DVEND
      DELTA=RM-ROUT
      CMM=CM*VSCALE
      WRITE(IOUT,208)M,M,M,CMM,M,DELTA,RM
      IF(RM.LT.0.0D0)GOTO 3950
      DO 3900 N=NL,NIP
      V(N)=TE+EPS-CM*(RM/(R(N)+DELTA))**M +CENT(N)
 3900 CONTINUE
      GOTO 9999
C
 3950 CONTINUE
      WRITE(IOUT,209)
      STOP
C
 4000 CONTINUE
C
C     MAITLAND-SMITH N(R*)-6 POTENTIAL
C
      READ(IN,101)GAMMA
      WRITE(IOUT,210)GAMMA
      DO 4100 N=1,NIP
      X=R(N)/RE
      XN=BETA+GAMMA*(X-ONE)
      V(N)=TE + EPS + EPS/(XN-SIX)*(SIX/X**XN - XN/X**6) + CENT(N)
 4100 CONTINUE
      GOTO 9999
C
 5000 CONTINUE
C
C     BUCKINGHAM EXP-N POTENTIAL
C
      DO 5100 N=1,NIP
      X=R(N)/RE
      XN=DBLE(NSIX)
      V(N)=TE + EPS + EPS/(BETA-XN)*(XN*EXP(BETA*(ONE-X))-BETA/X**NSIX)
     1   + CENT(N)
 5100 CONTINUE
      GOTO 9999
C
 9999 CONTINUE
      IF(IPRINT.GT.0) WRITE(IOUT,211)IPRINT,(V(N),N=1,NIP,IPRINT)
      RETURN
C
  101 FORMAT(4F10.2,I5)
  102 FORMAT(20I5)
  103 FORMAT(F6.3,F10.4)
C
  200 FORMAT(/' *** ERROR - IPOT =',I4,' NOT DEFINED IN CDPOT')
  201 FORMAT(/1X,29('****')//1X,A8,' POTENTIAL GENERATED FOR J =',I3//
     1   ' INPUT POTENTIAL PARAMETERS:'/' WELL DEPTH',T15,F14.4/
     2   ' RE',T15,F14.4/' BETA',T15,F14.4/' TE',T15,F14.4/)
  202 FORMAT(/' INPUT R VALUES SCALED BY MULTIPLYING BY',F12.5/
     1   ' SCALED RE',T15,F14.4/' SCALED BETA',T15,F14.4/)
  203 FORMAT(/' INPUT ENERGIES SCALED BY MULTIPLYING BY',F13.5/
     1   ' SCALED PARAMETERS USED IN INTERPOLATION ARE:'/
     2   ' WELL DEPTH',T15,F14.4/' TE',T15,F14.4/)
  204 FORMAT(/' NUMERICAL POTENTIAL AT',I5,' POINTS FROM',F5.2,' TO',
     1   F6.2,' ANGSTROMS'/)
  205 FORMAT(/' SHORT-RANGE EXTENSION USING BETA =',F10.6,' A-1.'/
     1   ' THIS VALUE OF BETA ALSO USED IN INTERPOLATING WELL REGION,'/
     2   ' USING PRODUCT OF MORSE POTENTIAL AND CUBIC SPLINE'/)
  206 FORMAT(/' LONG-RANGE EXTENSION USING ',I1,' , ',I1,' AND ',I2,
     1   ' COEFFICIENTS'/' WITH C',I1,' = ',E13.6)
  207 FORMAT(6X,'C',I1,'  = ',E13.6/6X,'C',I2,' = ',E13.6/
     1   ' SIGN CONVENTION: POSITIVE COEFFICIENTS ARE ATTRACTIVE.'/)
  208 FORMAT(/' LONG-RANGE EXTENSION USING   V(R) = -C',
     1   I1,' * (RM/(R+DELTA))**',I1/' WITH C',I1,' = ',E13.6,
     2   ' CM-1 A',I1,',  DELTA = ',F6.3,' ANGSTROMS,',
     3   '  AND  RM = ',F6.3//)
  209 FORMAT(' *** ERROR - GRADIENT OF POTENTIAL AT LAST POINT GIVEN',
     1   ' IS NOT TOWARDS ASYMPTOTE.'/12X,'SENSIBLE LONG-RANGE',
     2   ' EXTENSION IS NOT POSSIBLE USING THE ABOVE EXPRESSION.')
  210 FORMAT(' GAMMA',T15,F14.4/)
  211 FORMAT(/' SCALED POTENTIAL AT EVERY',I4,'TH POINT'//
     1   255(8(2X,E13.6)/))
      END
c***********************************************************************

c*********************************************************************** 
      SUBROUTINE INTRP(R1,V1,NP,C,V,NIP,RMIN,H,NP4)
C
C     SUBROUTINE FOR INTERPOLATING FROM AN UNEQUALLY SPACED GRID
C     TO AN EQUALLY SPACED GRID, USING CUBIC SPLINE INTERPOLATION.
C     INPUT ARRAY R1 MUST BE MONOTONICALLY INCREASING.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION R1(NP),V1(NP),C(NP4),V(NIP)
C
      R(I)=RMIN+H*DBLE(I-1)
C
      IF(RMIN.GE.R1(1)) GOTO 30
      PRINT 200, RMIN,R1(1)
      STOP
   30 CONTINUE
C
      C(1) = DERIV(R1(1),V1(1),4,1)
      C(2) = DERIV(R1(NP-3),V1(NP-3),4,4)
C
      EPS=1.0D-4
      EPS=EPS*H
      N2=2*NP
      N3=3*NP
C
C     CHECK R1 ARRAY
C
      DO 40 JK=2,NP
      IF(R1(JK).GT.R1(JK-1)) GOTO 40
      PRINT 201
      STOP
   40 CONTINUE
C
      CALL SPLINE(R1,V1,NP,3,C,NP4,IER)
      IF(IER .EQ. 0) GO TO 50
      PRINT 202
      STOP
   50 CONTINUE
C
      KK=1
      DO 100 I=1,NIP
      RI=R(I)
      RR=RI-EPS
      DO 98 K=KK,NP
      JK=K
      IF(R1(K).GE.RR)GOTO 99
   98 CONTINUE
      PRINT 203, RI
      STOP
   99 CONTINUE
      KK=JK
      JK=JK-1
      IF(JK.LT.1) JK=1
      R2=RI-R1(JK)
      V(I)=C(JK)+R2*(C(NP+JK)+R2*(C(N2+JK)+R2*C(N3+JK)))
  100 CONTINUE
      RETURN
C
  200 FORMAT(' *** ERROR IN INTRP - RMIN = ',E13.7,', WHICH IS LESS',
     1   ' THAN THE FIRST ELEMENT OF THE R1 ARRAY ',E13.7)
  201 FORMAT(' *** ERROR IN INTRP - R1 ARRAY NOT MONOTONICALLY',
     1   ' INCREASING')
  202 FORMAT(' *** ERROR IN SPLINE, CALLED FROM INTRP')
  203 FORMAT(' *** ERROR IN INTRP - FAILED TO MATCH R VALUES FOR R =',
     1   E13.7)
C
      END
c*********************************************************************** 

c*********************************************************************** 
      FUNCTION DERIV(A,F,N,I)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION A(N),F(N)
C
C     FUNCTION TO EVALUATE THE DERIVATIVE OF A POINTWISE FUNCTION AT ONE
C     OF THE SUPPLIED POINTS USING N-POINT LAGRANGIAN INTERPOLATION.
C     ON INPUT A(N) ARE THE POINTS AND F(N) THE FUNCTION VALUES.
C     I IS THE INDEX OF THE POINT WHERE THE DERIVATIVE IS REQUIRED.
C
      AI=A(I)
      BI=0.0D0
      DO 100 M=1,N
      IF(M.EQ.I) GOTO 100
      BI=BI+1.0D0/(AI-A(M))
  100 CONTINUE
      DERIV=BI*F(I)
C
      DO 300 M=1,N
      IF(M.EQ.I) GOTO 300
      BI=1.0D0
      DO 200 L=1,N
      IF(L.EQ.M) GOTO 200
      BI=BI/(A(M)-A(L))
      IF(L.EQ.I) GOTO 200
      BI=BI*(AI-A(L))
  200 CONTINUE
      DERIV=DERIV+BI*F(M)
  300 CONTINUE
      RETURN
      END





      SUBROUTINE LIDEO(V,G,X0,X,NIP,E0,H,DIAG,ORTH,MID)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION V(NIP),G(NIP),X0(NIP),X(NIP),DIAG(NIP),ORTH(NIP)
      DATA ZERO/0.0D0/, ONE/1.0D0/, TEN/10.0D0/, TWELVE/12.0D0/
C
C     SUBROUTINE FOR DIRECT SOLUTION OF PERTURBATION EQUATION,
C     FOR THE CASE OF A PERTURBATION DIAGONAL IN ELECTRONIC STATE.
C     J.M.HUTSON AND B.J.HOWARD, MOLEC.PHYS., 41, 1113 (1980)
C     J.M.HUTSON, J.PHYS. B, 14, 851 (1981)
C
C     LIDEO SOLVES THE LINEAR INHOMOGENEOUS DIFFERENTIAL EQUATION
C            D2X/DR2 = ~V(R)-E0| X + G(R)
C     WHERE V AND G ARE SPECIFIED ON A NUMERICAL GRID, AND X IS SUBJECT
C     TO THE BOUNDARY CONDITIONS X(0) =X(NIP+1) = 0.0
C
C     THIS SUBROUTINE IS FOR THE SPECIAL CASE THAT E0 IS AN EIGENVALUE
C     OF THE CORRESPONDING HOMOGENEOUS EQUATION, SO THAT AN ADDITIONAL
C     CONSTRAINT IS REQUIRED TO GIVE A UNIQUE SOLUTION. THE CONSTRAINT
C     APPLIED IS THAT X BE ORTHOGONAL TO X0 (EG X0 = ZEROTH ORDER FUNCTI
C
C     V, G AND E0 MUST BE SCALED BY MULTIPLYING BY 2*MU/HBAR**2,
C     SO THAT THEY ARE IN UNITS OF (LENGTH)**-2.
C
C     SUBROUTINE ARGUMENTS:
C     V      -  ARRAY OF DIMENSION NIP, CONTAINING SCALED POTENTIAL
C               ARRAY ON INPUT. UNCHANGED ON OUTPUT.
C     G      -  ARRAY OF DIMENSION NIP, CONTAINING SCALED RHS OF
C               INHOMOGENEOUS DIFF. EQUATION.  UNCHANGED ON OUTPUT.
C     X0     -  ARRAY OF DIMENSION NIP,CONTAINING ZEROTH ORDER VIBRATION
C               WAVEFUNCTION ON INPUT. UNCHANGED ON OUTPUT, EXCEPT AS
C               DESCRIBED UNDER ORTH BELOW.
C     X      -  ARRAY OF DIMENSION NIP.ON OUTPUT, CONTAINS SOLUTION OF
C               INHOMOGENEOUS DIFFERENTIAL EQUATION.
C     NIP    -  INTEGER VARIABLE, CONTAINING THE NUMBER OF POINTS
C               ON THE EQUALLY SPACED RADIAL MESH ON INPUT. UNCHANGED
C               ON OUTPUT.
C     E0     -  REAL VARIABLE, CONTAINING SCALED ZEROTH ORDER ENERGY ON
C               INPUT. UNCHANGED ON OUTPUT.
C     H      -  REAL VARIABLE, CONTAINING SPACING BETWEEN RADIAL MESH
C               POINTS ON INPUT. UNCHANGED ON OUTPUT.
C     DIAG   -  WORKSPACE ARRAY OF DIMENSION NIP.
C     ORTH   -  WORKSPACE ARRAY OF DIMENSION NIP.  ORTH MAY BE SET EQUAL
C               TO X0, IN WHICH CASE X0 IS OVERWRITTEN ON OUTPUT.
C     MID    -  ARRAY INDEX TO MATCHING POINT USED IN ORTHOGONALISATION.
C               ON INPUT, MID SHOULD BE SUCH THAT X0(MID) IS NOT CLOSE T
C               ZERO. IT IS RECOMMENDED THAT MID BE SET TO THE INDEX OF
C               THE OUTERMOST MAXIMUM IN X0.
C
      H2=H*H
      H12=H*H/TWELVE
      OLAP=ZERO
C
C     FIRST THE DIFFERENTIAL EQUATION IS APPROXIMATED BY A FINITE
C     DIFFERENCE EQUATION. THIS GIVES A TRIDIAGONAL MATRIX DEFINING
C     A SET OF NIP SIMULTANEOUS EQUATIONS, PLUS THE ORTHOGONALITY
C     CONDITION.
C
C     THE FIRST LOOP SETS UP THE TRIDIAGONAL MATRIX (EQS. 24,25)
C     AND THE ORTHOGONALITY CONDITION (EQ. 26).
C
      DO 10 N=1,NIP
      VTEMP=ONE/(ONE-H12*(V(N)-E0))
      DIAG(N)=TEN-TWELVE*VTEMP
      X(N)=H2*VTEMP*G(N)
      ORTH(N)=X0(N)*VTEMP
      OLAP=OLAP-H12*ORTH(N)*G(N)
   10 CONTINUE
C
C     NOW ELIMINATE SUBDIAGONAL ELEMENTS BETWEEN 1 AND MID-1,
C     AND SUPERDIAGONAL ELEMENTS FROM NIP TO MID+2, PROPAGATING THE
C     ORTHOGONALITY CONDITION ALSO
C
C     LOCAL VARIABLES ARE USED FOR STORING ELEMENTS OF DIAG, ORTH AND X
C     FROM ONE CYCLE TO THE NEXT TO MINIMISE ARRAY REFERENCES.
C     THESE ARE DD, OR AND XX RESPECTIVELY.
C
      OR=ORTH(1)
      XX=X(1)
      DD=ONE/DIAG(1)
      DO 20 N=2,MID
      OLAP=OLAP-XX*OR*DD
      OR=ORTH(N)-OR*DD
      XX=X(N)-XX*DD
      X(N)=XX
      DD=DIAG(N)-DD
      DIAG(N)=DD
      DD=ONE/DD
   20 CONTINUE
      ORSAV=OR
C
      OR=ORTH(NIP)
      XX=X(NIP)
      DD=ONE/DIAG(NIP)
      K=NIP
      MIDP=MID+2
      DO 30 N=MIDP,NIP
      K=K-1
      OLAP=OLAP-XX*OR*DD
      OR=ORTH(K)-OR*DD
      XX=X(K)-XX*DD
      X(K)=XX
      DD=DIAG(K)-DD
      DIAG(K)=DD
      DD=ONE/DD
   30 CONTINUE
C
C     NOW USE ORTHOGONALITY CONDITION TO SOLVE FOR X(MID)
C
      XX=(OLAP-OR*X(MID))/(ORSAV-DIAG(MID)*OR)
      X(MID)=XX
C
C     AND PROPAGATE SOLUTION VECTOR FROM MID TO NIP AND 1
C
      MIDP=MID+1
      DO 40 N=MIDP,NIP
      TEMP=XX
      XX=(X(N)-XX)/DIAG(N)
      X(N)=XX
   40 CONTINUE
C
      K=MID
      XX=X(MID)
      DO 50 N=2,MID
      K=K-1
      XX=(X(K)-XX)/DIAG(K)
      X(K)=XX
   50 CONTINUE
C
C     FINALLY TRANSFORM BACK TO TRUE SOLUTION.
C     INVERSE TRANSFORMATION FOR NUMEROV CORRECTION (EQ. 22).
C
      DO 60 N=1,NIP
      X(N)=(X(N)+H12*G(N))/(ONE-H12*(V(N)-E0))
   60 CONTINUE
C
C     CHECK THAT SOLUTION IS NOT INCREASING NEAR BOUNDARIES.
C     IF IT IS, ZERO AND PRINT WARNING.
C
      IF(ABS(X(NIP)).LE.ABS(X(NIP-1))) GOTO 80
      WRITE(6,201)
      K=NIP+1
      DO 70 N=2,NIP
      K=K-1
      X(K)=ZERO
      IF(ABS(X(K-1)).GT.ABS(X(K))) GOTO80
   70 CONTINUE
   80 CONTINUE
C
      IF(ABS(X(2)).GE.ABS(X(1))) RETURN
      WRITE(6,201)
      DO 90 N=1,NIP
      X(N)=ZERO
      IF(ABS(X(N+1)).GT.ABS(X(N))) RETURN
   90 CONTINUE
C
      RETURN
C
  201 FORMAT(' *** WARNING - Y INCREASING NEAR BOUNDARY - ZEROED')
C
      END





      SUBROUTINE RADSOL(V,X,NIP,E,NE,NLEV,RMIN,H,EPS)
C
C     RADSOL FINDS ALL BOUND LEVELS OF POTENTIAL V, UP TO A
C     MAXIMUM OF NE LEVELS; THE NUMBER OF LEVELS FOUND IS
C     RETURNED IN NLEV, AND THEIR ENERGIES IN THE FIRST NLEV
C     ELEMENTS OF THE ARRAY E.
C
C     NIP IS THE NUMBER OF EQUALLY SPACED GRID POINTS AT WHICH
C     V IS SPECIFIED; X IS A WORKSPACE ARRAY OF DIMENSION NIP;
C     H IS THE R STEP SIZE; RMIN IS THE INNERMOST VALUE OF R;
C     AND EPS IS THE ENERGY CONVERGENCE CRITERION FOR SCHROD.
C
C     NB. RADSOL IS LIKELY TO MISS LEVELS VERY NEAR THE TOP
C     OF THE POTENTIAL WELL.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION V(NIP),X(NIP),E(NE)
      DATA ZERO/0.0D0/, HALF/0.5D0/,  ONE/1.0D0/, Z32/1.5D0/,
     1   TWO/2.0D0/
C
      RMAX=RMIN+H*DBLE(NIP-1)
C
      NLEV=NE
      DO 1000 NV=1,NE
      NVV=NV-1
      IF(NV.EQ.1) GOTO 200
      IF(NV.EQ.2) GOTO 300
C
C     FOR V > 1, USE ENERY GUESS BASED ON ENERGIES OF LOWER TWO
C     VIBRATIONAL LEVELS.
C
      ELOW=E(NVV)
      EIN=TWO*ELOW-E(NV-2)
      EHIGH=ELOW+10.0D0*(EIN-ELOW)
      GOTO 500
C
C     CASE FOR FIRST VIBRATIONAL LEVEL (V=0)
C
  200 CONTINUE
      DO 210 N=1,NE
      E(N)=ZERO
  210 CONTINUE
C
C     FIND POTENTIAL MINIMUM
C
      WELDEP=V(1)
      NIP7=NIP-7
      DO 220 N=6,NIP7
      IF(WELDEP.LT.V(N))GOTO 220
      NMIN=N
      WELDEP=V(N)
  220 CONTINUE
C
C     FIND PARAMETERS OF APPROXIMATE MORSE POTENTIAL
C
      CURV=(V(NMIN+5)+V(NMIN-5)-TWO*V(NMIN))/(25.0D0*H*H)
      ELOW=WELDEP
      OMEGA=SQRT(TWO*CURV)
      XE=OMEGA/(4.0D0*(V(NIP)-WELDEP))
C
      EIN=WELDEP+HALF*OMEGA*(ONE-HALF*XE)
      EHIGH=WELDEP+5.0D0*OMEGA
      IF(V(NIP).NE.V(NIP-1)) GOTO 500
      EIN=WELDEP+5.0D0*OMEGA
      XE=ZERO
      EHIGH=WELDEP+8.0D0*OMEGA
      GOTO 500
C
C     CASE FOR SECOND VIBRATIONAL LEVEL(V=1)
C     ADJUST MORSE OMEGA TO FIT FIRST LEVEL
C
  300 CONTINUE
      ELOW=E(1)
      OMEGA=TWO*(ELOW-WELDEP)/(ONE-HALF*XE)
      EIN=WELDEP+Z32*OMEGA*(ONE-Z32*XE)
      EHIGH=WELDEP+5.0D0*OMEGA
C
  500 CONTINUE
      EHIGH=MIN(EHIGH,V(NIP))
      IF(EIN.GT.EHIGH) EIN=HALF*(EHIGH+ELOW)
      DO 600 N=1,7
C
C     USE ENERGY FROM E ARRAY IF AVAILABLE
C
      IF(ABS(E(NV)).GT.1.0D-08) EIN=E(NV)
      CALL SCHROD(X,ONE,NFOUND,EPS,20,H,RMIN,RMAX,V,NIP,EIN,EOUT,IFAIL)
C
      IF(IFAIL.GT.0) GOTO 2000
      NFOUND=NFOUND+1
      IF(NFOUND.LE.NE) E(NFOUND)=EOUT
      IF(NFOUND.EQ.NV) GOTO 1000
      IF(NFOUND.GT.NV) EHIGH=MIN(EHIGH,EIN,EOUT)
      IF(NFOUND.LT.NV) ELOW =MIN(ELOW, EIN,EOUT)
      IF(EHIGH.NE.ELOW) GOTO 700
      PRINT 201, EHIGH
  201 FORMAT(' *** ERROR IN RADSOL: EHIGH = ELOW =',E13.6)
      STOP
  700 CONTINUE
      EIN2=(EHIGH+ELOW)/TWO
      IF(EIN.EQ.EIN2) GOTO 2000
      EIN=EIN2
  600 CONTINUE
C
      GOTO 2000
C
 1000 CONTINUE
      RETURN
C
 2000 CONTINUE
      NLEV=NVV
      RETURN
C
      END





      SUBROUTINE SCHROD(P,FENCV,KV,EPS,MAXIT,H,RMIN,RMAX,V,N,E0,E,SCHR)
C
C     SOLVES THE SCHROEDINGER-TYPE EQUATION
C          D2(PSI)/DR2 + (E-V(R))*PSI =0.
C     WITH THIS EQUATION DETERMINING THE UNITS
C
C     THE INPUT ARRAY V IS THE SCALED POTENTIAL
C     (8*PI**2*MU*V)/H**2
C     SO THAT THE INPUT V IS IN UNITS OF (LENGTH)**-2.
C     THE FACTOR USED FOR THIS IS HELD IN FENCV. THE INITIAL
C     GUESS E0 AND THE OUTPUT ENERGY E ARE IN UNSCALED UNITS,
C     AND ARE MULTIPLIED BY FENCV BEFORE COMPARISON WITH V.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER SCHR
C
      DIMENSION V(N),P(N)
      DATA ZERO/0.0D0/, ONE/1.0D0/
      EPRIN=E0
      H2=H**2
      HV=H**2/12.0D0
      E=E0*FENCV
      DE=EPS
      TEST=-ONE
      PMIN=1.0D-30
      PMAX=1.0D30
C
C     .....START ITER LOOP
C
      DO 410 IT=1,MAXIT
C
C     .....START INWARD INTEGRATION
C
      P1=PMIN
      P(N)=P1
      GN=V(N)-E
      GI=V(N-1)-E
      GG=V(1)-E
      Y1=(ONE-HV*GN)*P1
C
C     .....TEST IF E TOO HIGH
C
      IF(GG)120,110,110
110   IF(GI)120,130,130
120   SCHR=2
      RETURN
130   P1=P1*EXP(RMAX*SQRT(GN)-(RMAX-H)*SQRT(GI))
      Y2=(ONE-HV*GI)*P1
      P(N-1)=P1
C
C     .....INTEGRATE
C
      M=N-2
140   Y3=Y2+(Y2-Y1)+H2*GI*P1
      GI=V(M)-E
      P1=Y3/(ONE-HV*GI)
      P(M)=P1
C
C     .....TEST FOR DECREASE IN THE WAVEFUNCTION
C
      IF(P(M)-P(M+1))220,220,150
150   IF(M-5)220,220,160
160   Y1=Y2
      Y2=Y3
      IF(P(M)-PMAX)210,170,170
170   PX=ONE/P1
      DO 200 I=M,N
      IF(P(I)-PMIN)180,190,190
180   P(I)=ZERO
      GOTO 200
190   P(I)=P(I)*PX
200   CONTINUE
      Y1=Y1*PX
      Y2=Y2*PX
      P1=ONE
210   M=M-1
      GOTO 140
C
C     .....FIRST MAXIMUM FOUND ON INWARD INTEGRATION
C
220   PM=ONE/P1
      MSAVE=M
      YIN=Y2/P1
      DO 250 J=M,N
      IF(P(J)-PMIN)230,240,240
230   P(J)=ZERO
      GOTO 250
240   P(J)=P(J)*PM
250   CONTINUE
C
C     .....START OUTWARD INTEGRATION
C
      P1=PMIN
      P(1)=P1
      Y1=ZERO
      GI=V(1)-E
      Y2=(ONE-HV*GI)*P1
      DO 300 I=2,M
      Y3=Y2+((Y2-Y1)+H2*GI*P1)
      GI=V(I)-E
      P1=Y3/(ONE-HV*GI)
      P(I)=P1
      Y1=Y2
      Y2=Y3
      IF(ABS(P(I))-PMAX)300,260,260
260   PX=ONE/P1
      DO 290 J=1,I
      IF(ABS(P(J))-PMIN)270,280,280
270   P(J)=ZERO
      GOTO 290
280   P(J)=P(J)*PX
290   CONTINUE
      Y1=Y1*PX
      Y2=Y2*PX
      P1=ONE
300   CONTINUE
C
C     .....FINISHED OUTWARD INTEGRATION
C
      PM=ONE/P1
      YOUT=Y1/P1
      YM=Y2/P1
      DO 340 J=1,M
      IF(ABS(P(J))-PMIN)320,330,330
320   P(J)=ZERO
      GOTO 340
330   P(J)=P(J)*PM
340   CONTINUE
C
C     .....CORRECTION
C
      DF=ZERO
      DO 370 J=1,N
      IF(ABS(P(J))-PMIN)350,360,360
350   P(J)=ZERO
      GOTO 370
360   DF=DF+P(J)**2
370   CONTINUE
      F=(-YOUT-YIN+2.0D0*YM)/H2+(V(M)-E)
      DOLD=DE
      DE=F/DF
      E=E+DE
C
C     .....CHECK TO ASSURE CONVERGENCE OF THE CORRECTION TERM
C
      TEST=ABS(DOLD)-ABS(DE)
      IF(TEST)410,400,400
400   IF(ABS(DE)-EPS)420,420,410
410   CONTINUE
C
C     .....FAILED TO CONVERGE IN MAXIT ITERATIONS
C     .....COUNT NODES AND NORMALIZE AS USUAL
C
      SCHR=1
      GOTO 430
C
C     .....CONVERGED-COUNT NODES
C
420   SCHR=0
430   KV=0
      DO 440 J=2,N
      IF(V(J).GT.E)GOTO 440
      PPP=SIGN(ONE,P(J))*SIGN(ONE,P(J-1))
      IF(PPP.GT.ZERO)GOTO 440
      KV=KV+1
440   CONTINUE
C
C     .....NORMALIZE--USING SUM P(J)**2= 1.
C
      SN=SQRT(H*DF)
      DO 450 J=1,N
450   P(J)=P(J)/SN
      E=E/FENCV
      RETURN
      END





      SUBROUTINE SPLINE(X,Y,N,IOPT,C,N4,IER)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION X(N),Y(N),C(N4)
      JMP=1
      NER=1000
      IF(N-1)250,250,100
C
C     INITIALIZATION
C
100   XC=X(1)
      YB=Y(1)
      H=0.D0
      A=0.D0
      R=0.D0
      DYB=0.D0
      NER=2000
C
C     IOL=0 - GIVEN DERIVATIVE AT FIRST POINT
C     IOH=0 - GIVEN DERIVATIVE AT LAST POINT
C
      IOL=IOPT-1
      IOH=IOPT-2
      IF(IOH-1)120,110,120
110   IOL=0
      IOH=0
120   DY2=C(2)
C
C     FORM THE SYSTEM OF LINEAR EQUATIONS
C     AND ELIMINATE SUBSEQUENTIALLY
C
      J=1
      DO 230 I=1,N
      J2=N+I
      J3=J2+N
      A=H*(2.D0-A)
      DYA=DYB+H*R
      IF(I-N)150,130,130
C
C     SET DERIVATIVE DY2 AT LAST POINT
C
130   DYB=DY2
      H=0.D0
      IF(IOH)140,200,140
140   DYB=DYA
      GOTO 220
150   J=J+JMP
      XB=XC
      XC=X(J)
      H=XC-XB
C
C     II=0 - INCREASING ABSCISSAE
C     II=1 - DECREASING ABSCISSAE
C
      II=0
      IF(H)160,250,170
160   II=1
170   YA=YB
      YB=Y(J)
      DYB=(YB-YA)/H
      IF(I-1)180,180,200
180   J1=II
      IF(IOL)220,190,220
190   DYA=C(1)
200   IF(J1-II)250,210,250
210   A=1.D0/(H+H+A)
220   R=A*(DYB-DYA)
      C(J3)=R
      A=H*A
      C(J2)=A
230   C(I)=DYB
C
C     BACK SUBSTITUTION OF THE SYSTEM OF LINEAR EQUATIONS
C     AND COMPUTATION OF THE OTHER COEFFICIENTS
C
      A=1.D0
      J1=J3+N+II-II*N
      I=N
      DO 240 IOL=1,N
      XB=X(J)
      H=XC-XB
      XC=XB
      A=A+H
      YB=R
      R=C(J3)-R*C(J2)
      YA=R+R
      C(J3)=YA+R
      C(J2)=C(I)-H*(YA+YB)
      C(J1)=(YB-R)/A
      C(I)=Y(J)
      A=0.D0
      J=J-JMP
      I=I-1
      J2=J2-1
      J3=J3-1
240   J1=J3+N+II
      IER=0
      RETURN
250   IER=NER
      RETURN
      END

